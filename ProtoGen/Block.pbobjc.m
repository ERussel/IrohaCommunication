// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Block.pbobjc.h"
 #import "Primitive.pbobjc.h"
 #import "Transaction.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BlockRoot

@implementation BlockRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BlockRoot_FileDescriptor

static GPBFileDescriptor *BlockRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"iroha.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Block

@implementation Block

@dynamic hasPayload, payload;
@dynamic signaturesArray, signaturesArray_Count;

typedef struct Block__storage_ {
  uint32_t _has_storage_[1];
  Block_Payload *payload;
  NSMutableArray *signaturesArray;
} Block__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(Block_Payload),
        .number = Block_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signaturesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = Block_FieldNumber_SignaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block__storage_, signaturesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Block_Payload

@implementation Block_Payload

@dynamic transactionsArray, transactionsArray_Count;
@dynamic txNumber;
@dynamic height;
@dynamic prevBlockHash;
@dynamic createdTime;

typedef struct Block_Payload__storage_ {
  uint32_t _has_storage_[1];
  uint32_t txNumber;
  NSMutableArray *transactionsArray;
  NSData *prevBlockHash;
  uint64_t height;
  uint64_t createdTime;
} Block_Payload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = Block_Payload_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block_Payload__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "txNumber",
        .dataTypeSpecific.className = NULL,
        .number = Block_Payload_FieldNumber_TxNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block_Payload__storage_, txNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = Block_Payload_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Block_Payload__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "prevBlockHash",
        .dataTypeSpecific.className = NULL,
        .number = Block_Payload_FieldNumber_PrevBlockHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Block_Payload__storage_, prevBlockHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "createdTime",
        .dataTypeSpecific.className = NULL,
        .number = Block_Payload_FieldNumber_CreatedTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Block_Payload__storage_, createdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block_Payload class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block_Payload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Block)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
